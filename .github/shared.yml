#<shared>

definitions:
  default-defaults: &default-defaults
    run:
      shell: bash

  checkout: &checkout
    uses: actions/checkout@v3
    with:
      fetch-depth: '0'

  setup-dotnet: &setup-dotnet
    name: Setup .NET
    uses: actions/setup-dotnet@v3
    with:
      dotnet-version: |
        3.1.x
        5.0.x
        9.x

  setup-nuget: &setup-nuget
    name: Setup NuGet
    run: |
      dotnet nuget update source github --store-password-in-clear-text --username AshleighAdams --password ${{ secrets.PERSONAL_ACCESS_TOKEN }}
      dotnet nuget enable source github

  setup-minver: &setup-minver
    name: Setup MinVer
    run: |
      git fetch --tags --force
      git checkout "${GITHUB_REF#refs/*/}"
      dotnet tool install --global minver-cli --version 2.5.0

  restore: &restore
    name: Restore
    run: dotnet restore

  build: &build
    name: Build
    run: dotnet build --configuration Release --no-restore
    
  test: &test
    name: Test
    run: dotnet test --configuration Debug --logger GitHubActions -p:CollectCoverage=true -p:CoverletOutputFormat=cobertura

  mutation-test: &mutation-test
    name: Mutation Test
    run: |
      dotnet tool install --global dotnet-stryker --version 3.2.0
      cd tests/UnitTests
      if [[ "$GITHUB_REF" == "refs/heads/master" ]]; then
        dotnet stryker --reporter html --reporter dashboard --reporter progress --version master # --log-to-file
      else
        dotnet stryker --reporter html --reporter progress # --log-to-file
      fi
    env:
      STRYKER_DASHBOARD_API_KEY: ${{ secrets.STRYKER_DASHBOARD_API_KEY }}

  mutation-test-archive: &mutation-test-archive
    name: Archive mutation output
    if: success() || failure()
    run: |
      cd tests/UnitTests
      mkdir -p ../../artifacts
      find StrykerOutput -name mutation-report.html -exec cp {} ../../artifacts/ \;
      if [[ -d StrykerOutput ]]; then
        mv StrykerOutput ../../artifacts/StrykerOutput
      fi

  mutation-test-upload-artifacts: &mutation-test-upload-artifacts
    name: Upload Artifacts
    uses: actions/upload-artifact@v4
    if: success() || failure()
    with:
      name: artifacts-mutation-test
      if-no-files-found: error
      path:  |
        artifacts/*

  publish-codecov: &publish-codecov
    name: Publish Codecov
    uses: codecov/codecov-action@v2
    with:
      token: ${{ secrets.CODECOV_TOKEN }}
      files: ./tests/UnitTests/coverage.cobertura.xml

  pack: &pack
    name: Pack
    run: dotnet pack -p:PackageOutputPath="$(pwd)/artifacts" --configuration Release --no-restore

  upload-artifacts: &upload-artifacts
    name: Upload Artifacts
    uses: actions/upload-artifact@v4
    if: success() || failure()
    with:
      name: artifacts
      if-no-files-found: error
      path:  |
        artifacts/*

  download-artifacts: &download-artifacts
    name: Download Artifacts
    uses: actions/download-artifact@v4
    with:
      path: artifacts
      pattern: '*'
      merge-multiple: true

  publish-github: &publish-github
    name: Publish Nuget GitHub
    run: dotnet nuget push 'artifacts/*.nupkg' -k ${GITHUB_TOKEN} -s github --skip-duplicate --no-symbols
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  run-integration-tests: &run-integration-tests
    name: Run Integration Tests
    run: |
      chmod +x ./tests/IntegrationTests/run.sh
      ./tests/IntegrationTests/run.sh

  build-standalone-binaries: &build-standalone-binaries
    name: 'Build Standalone Binaries'
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - rid: win-x64
            os: windows-latest
            exe: verlite.exe
          - rid: linux-x64
            os: ubuntu-latest
            exe: verlite
          - rid: osx-x64
            os: macos-13
            exe: verlite
    steps:
    - *checkout
    - *setup-dotnet
    - name: Publish
      run: |
        dotnet publish -r "${rid}" -c Release src/Verlite.CLI/Verlite.CLI.csproj -p:VerliteAot=true -o build
        mkdir -p artifacts
        cp "build/${exe}" "artifacts/${exe}"
        cd artifacts/
        ./${exe} --version
        tar -zcvf "verlite-${rid}.tar.gz" "${exe}"
        rm "${exe}"
      env:
        rid: ${{ matrix.rid }}
        exe: ${{ matrix.exe }}
    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      if: success() || failure()
      with:
        name: artifacts-${{ matrix.rid }}
        if-no-files-found: error
        path:  |
          artifacts/*

  empty: "hi" # fixes the yml parser from messing the last value up

#</shared>
